
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftXORleftANDnonassocLESSTHANGREATTHANleftPLUSMINUSleftTIMESDIVIDEnonassocNEWrightPRIVATEPROTECTEDPUBLICABSTRACT AND AND_ASSIGN ARRAYLIST BLOCK_COMMENT BOOLEAN BYTE CHAR COMA CONCA CONCAT DEFAULT DIVIDE DIVIDE_ASSIGN DOSCOMA DOUBLE DOUBLELINKEDLIST EQUAL EQUALS ESPACIO FINAL FLOAT GREATTHAN GREATTHANEQUAL INT INTEGER LCORCHETE LESSTHAN LESSTHANEQUAL LINKEDLIST LIST LLLAVE LONG LPAREN MINUS MINUSMINUS MINUS_ASSIGN MOD MOD_ASSIGN NEQUAL NEW NOT NULL OBJECT OR OR_ASSIGN PLUS PLUSPLUS PLUS_ASSIGN PRIVATE PROTECTED PUBLIC PUNTO PUNTOCOMA QUEUE RCORCHETE RLLAVE RPAREN SHORT STACK STATIC STRING TIMES TIMESTIMES TIMES_ASSIGN VAR XOR XOR_ASSIGNprogram :  declaration\n                | listdeclaration\n                | arraydeclaration\n                | linkedlistdeclaration\n                | doublelinkedlistdeclaration\n                | stackdeclaration\n                | queuedeclaration\n        Type : INT\n            | BOOLEAN\n            | SHORT\n            | FLOAT\n            | LONG\n            | DOUBLE\n            | CHAR\n            | BYTE\n            | OBJECT\n            Typet : INT\n            | BOOLEAN\n            | SHORT\n            | FLOAT\n            | LONG\n            | DOUBLE\n            | CHAR\n            | BYTE\n            | OBJECT\n            | empty\n            accessmodif : PUBLIC\n                    | PRIVATE\n                    | PROTECTED\n                    | DEFAULT\n                    | emptyfinalstatvar : FINAL\n                | STATIC\n                | FINAL STATIC\n                | emptydeclaration : accessmodif finalstatvar Type VAR endexpression\n            | accessmodif finalstatvar Type assign\n            listdeclaration : accessmodif finalstatvar LIST LESSTHAN Type GREATTHAN VAR endexpression\n            | accessmodif accessmodif finalstatvar LIST LESSTHAN Type GREATTHAN VAR endexpression\n            | accessmodif finalstatvar LIST LESSTHAN Type GREATTHAN  listassign\n            | accessmodif accessmodif finalstatvar LIST LESSTHAN Type GREATTHAN listassign\n    listassign : VAR EQUALS listexpression endexpressionlistexpression : NEW LIST LESSTHAN Typet GREATTHAN LPAREN RPAREN\n        arraydeclaration : accessmodif finalstatvar ARRAYLIST LESSTHAN Type GREATTHAN VAR endexpression\n            | accessmodif accessmodif finalstatvar ARRAYLIST LESSTHAN Type GREATTHAN VAR endexpression\n            | accessmodif finalstatvar ARRAYLIST LESSTHAN Type GREATTHAN arrayassign\n            | accessmodif accessmodif finalstatvar ARRAYLIST LESSTHAN Type GREATTHAN arrayassign\n            arrayassign : VAR EQUALS arrayexpression endexpressionarrayexpression : NEW ARRAYLIST LESSTHAN Typet GREATTHAN LPAREN RPAREN\n        linkedlistdeclaration : accessmodif finalstatvar LINKEDLIST LESSTHAN Type GREATTHAN VAR endexpression\n                            | accessmodif accessmodif finalstatvar LINKEDLIST LESSTHAN Type GREATTHAN VAR endexpression\n                            | accessmodif finalstatvar LINKEDLIST LESSTHAN Type GREATTHAN linkedlistassign\n                            | accessmodif accessmodif finalstatvar LINKEDLIST LESSTHAN Type GREATTHAN linkedlistassign\n    linkedlistassign : VAR EQUALS linkedlistexpression endexpressionlinkedlistexpression : NEW LINKEDLIST LESSTHAN Typet GREATTHAN LPAREN RPAREN\n        doublelinkedlistdeclaration : accessmodif finalstatvar DOUBLELINKEDLIST LESSTHAN Type GREATTHAN VAR endexpression\n                            | accessmodif accessmodif finalstatvar DOUBLELINKEDLIST LESSTHAN Type GREATTHAN VAR endexpression\n                            | accessmodif finalstatvar DOUBLELINKEDLIST LESSTHAN Type GREATTHAN doublelinkedlistassign\n                            | accessmodif accessmodif finalstatvar DOUBLELINKEDLIST LESSTHAN Type GREATTHAN doublelinkedlistassign\n    doublelinkedlistassign : VAR EQUALS doublelinkedlistexpression endexpressiondoublelinkedlistexpression : NEW DOUBLELINKEDLIST LESSTHAN Typet GREATTHAN LPAREN RPAREN\n        stackdeclaration : accessmodif finalstatvar STACK LESSTHAN Type GREATTHAN VAR endexpression\n                            | accessmodif accessmodif finalstatvar STACK LESSTHAN Type GREATTHAN VAR endexpression\n                            | accessmodif finalstatvar STACK LESSTHAN Type GREATTHAN stackassign\n                            | accessmodif accessmodif finalstatvar STACK LESSTHAN Type GREATTHAN stackassign\n    stackassign : STRING EQUALS stackexpression endexpressionstackexpression : NEW STACK LESSTHAN Typet GREATTHAN LPAREN RPAREN\n        queuedeclaration : accessmodif finalstatvar QUEUE LESSTHAN Type GREATTHAN  VAR endexpression\n                            | accessmodif accessmodif finalstatvar QUEUE LESSTHAN Type GREATTHAN  VAR endexpression\n                            | accessmodif finalstatvar QUEUE LESSTHAN Type GREATTHAN queueassign\n                            | accessmodif accessmodif finalstatvar QUEUE LESSTHAN Type GREATTHAN queueassign\n    queueassign : VAR EQUALS queueexpression endexpressionqueueexpression : NEW QUEUE LESSTHAN Typet GREATTHAN LPAREN RPAREN\n                        | NEW LINKEDLIST LESSTHAN Typet GREATTHAN LPAREN RPAREN\n        assign : VAR EQUALS expression endexpressionendexpression : PUNTOCOMAexpression : expression PLUS expression\n           | expression MINUS expression\n           | expression TIMES expression\n           | expression DIVIDE expression\n           | expression MOD expression\n           | PLUSPLUS\n           | MINUSMINUS\n           | expression TIMESTIMES expression\n           | TIMES_ASSIGN expression\n           | MINUS_ASSIGN expression\n           | PLUS_ASSIGN expression\n           | DIVIDE_ASSIGN expression\n           | MOD_ASSIGN expression\n           | LPAREN expression RPAREN\n           | INTEGER\n           | emptyempty :'
    
_lr_action_items = {'PUBLIC':([0,9,10,11,12,13,14,],[10,10,-27,-28,-29,-30,-31,]),'PRIVATE':([0,9,10,11,12,13,14,],[11,11,-27,-28,-29,-30,-31,]),'PROTECTED':([0,9,10,11,12,13,14,],[12,12,-27,-28,-29,-30,-31,]),'DEFAULT':([0,9,10,11,12,13,14,],[13,13,-27,-28,-29,-30,-31,]),'FINAL':([0,9,10,11,12,13,14,15,19,],[-93,17,-27,-28,-29,-30,-31,17,-31,]),'STATIC':([0,9,10,11,12,13,14,15,17,19,],[-93,18,-27,-28,-29,-30,-31,18,38,-31,]),'LIST':([0,9,10,11,12,13,14,15,16,17,18,19,20,21,38,161,],[-93,-93,-27,-28,-29,-30,-31,-93,23,-32,-33,-31,39,-35,-34,173,]),'ARRAYLIST':([0,9,10,11,12,13,14,15,16,17,18,19,20,21,38,163,],[-93,-93,-27,-28,-29,-30,-31,-93,24,-32,-33,-31,40,-35,-34,175,]),'LINKEDLIST':([0,9,10,11,12,13,14,15,16,17,18,19,20,21,38,165,171,],[-93,-93,-27,-28,-29,-30,-31,-93,25,-32,-33,-31,41,-35,-34,177,184,]),'DOUBLELINKEDLIST':([0,9,10,11,12,13,14,15,16,17,18,19,20,21,38,167,],[-93,-93,-27,-28,-29,-30,-31,-93,26,-32,-33,-31,42,-35,-34,179,]),'STACK':([0,9,10,11,12,13,14,15,16,17,18,19,20,21,38,169,],[-93,-93,-27,-28,-29,-30,-31,-93,27,-32,-33,-31,43,-35,-34,181,]),'QUEUE':([0,9,10,11,12,13,14,15,16,17,18,19,20,21,38,171,],[-93,-93,-27,-28,-29,-30,-31,-93,28,-32,-33,-31,44,-35,-34,183,]),'INT':([0,9,10,11,12,13,14,16,17,18,19,38,47,48,49,50,51,52,53,54,55,56,57,58,185,186,187,188,189,190,191,],[-93,-93,-27,-28,-29,-30,-31,29,-32,-33,-35,-34,29,29,29,29,29,29,29,29,29,29,29,29,193,193,193,193,193,193,193,]),'BOOLEAN':([0,9,10,11,12,13,14,16,17,18,19,38,47,48,49,50,51,52,53,54,55,56,57,58,185,186,187,188,189,190,191,],[-93,-93,-27,-28,-29,-30,-31,30,-32,-33,-35,-34,30,30,30,30,30,30,30,30,30,30,30,30,194,194,194,194,194,194,194,]),'SHORT':([0,9,10,11,12,13,14,16,17,18,19,38,47,48,49,50,51,52,53,54,55,56,57,58,185,186,187,188,189,190,191,],[-93,-93,-27,-28,-29,-30,-31,31,-32,-33,-35,-34,31,31,31,31,31,31,31,31,31,31,31,31,195,195,195,195,195,195,195,]),'FLOAT':([0,9,10,11,12,13,14,16,17,18,19,38,47,48,49,50,51,52,53,54,55,56,57,58,185,186,187,188,189,190,191,],[-93,-93,-27,-28,-29,-30,-31,32,-32,-33,-35,-34,32,32,32,32,32,32,32,32,32,32,32,32,196,196,196,196,196,196,196,]),'LONG':([0,9,10,11,12,13,14,16,17,18,19,38,47,48,49,50,51,52,53,54,55,56,57,58,185,186,187,188,189,190,191,],[-93,-93,-27,-28,-29,-30,-31,33,-32,-33,-35,-34,33,33,33,33,33,33,33,33,33,33,33,33,197,197,197,197,197,197,197,]),'DOUBLE':([0,9,10,11,12,13,14,16,17,18,19,38,47,48,49,50,51,52,53,54,55,56,57,58,185,186,187,188,189,190,191,],[-93,-93,-27,-28,-29,-30,-31,34,-32,-33,-35,-34,34,34,34,34,34,34,34,34,34,34,34,34,198,198,198,198,198,198,198,]),'CHAR':([0,9,10,11,12,13,14,16,17,18,19,38,47,48,49,50,51,52,53,54,55,56,57,58,185,186,187,188,189,190,191,],[-93,-93,-27,-28,-29,-30,-31,35,-32,-33,-35,-34,35,35,35,35,35,35,35,35,35,35,35,35,199,199,199,199,199,199,199,]),'BYTE':([0,9,10,11,12,13,14,16,17,18,19,38,47,48,49,50,51,52,53,54,55,56,57,58,185,186,187,188,189,190,191,],[-93,-93,-27,-28,-29,-30,-31,36,-32,-33,-35,-34,36,36,36,36,36,36,36,36,36,36,36,36,200,200,200,200,200,200,200,]),'OBJECT':([0,9,10,11,12,13,14,16,17,18,19,38,47,48,49,50,51,52,53,54,55,56,57,58,185,186,187,188,189,190,191,],[-93,-93,-27,-28,-29,-30,-31,37,-32,-33,-35,-34,37,37,37,37,37,37,37,37,37,37,37,37,201,201,201,201,201,201,201,]),'$end':([1,2,3,4,5,6,7,8,46,59,61,97,111,113,115,117,119,122,124,126,128,130,132,134,142,144,146,148,150,152,154,155,156,157,158,159,172,174,176,178,180,182,],[0,-1,-2,-3,-4,-5,-6,-7,-37,-36,-76,-75,-40,-46,-52,-58,-64,-70,-41,-47,-53,-59,-65,-71,-38,-44,-50,-56,-62,-68,-39,-45,-51,-57,-63,-69,-42,-48,-54,-60,-66,-72,]),'VAR':([22,29,30,31,32,33,34,35,36,37,85,86,87,88,89,90,91,92,93,94,95,96,],[45,-8,-9,-10,-11,-12,-13,-14,-15,-16,110,112,114,116,118,121,123,125,127,129,131,133,]),'LESSTHAN':([23,24,25,26,27,28,39,40,41,42,43,44,173,175,177,179,181,183,184,],[47,48,49,50,51,52,53,54,55,56,57,58,185,186,187,188,189,190,191,]),'GREATTHAN':([29,30,31,32,33,34,35,36,37,62,63,64,65,66,67,68,69,70,71,72,73,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,],[-8,-9,-10,-11,-12,-13,-14,-15,-16,85,86,87,88,89,90,91,92,93,94,95,96,-93,-93,-93,-93,-93,-93,-93,209,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,210,211,212,213,214,215,]),'EQUALS':([45,110,112,114,116,120,121,123,125,127,129,133,],[60,143,145,147,149,151,153,143,145,147,149,153,]),'PUNTOCOMA':([45,60,74,75,76,77,78,79,80,81,83,84,98,99,100,101,102,103,104,105,106,107,108,110,112,114,116,118,121,123,125,127,129,131,133,135,136,137,138,139,140,141,160,162,164,166,168,170,223,224,225,226,227,228,229,],[61,-93,61,-82,-83,-93,-93,-93,-93,-93,-91,-92,-93,-93,-93,-93,-93,-93,-85,-86,-87,-88,-89,61,61,61,61,61,61,61,61,61,61,61,61,-77,-78,-79,-80,-81,-84,-90,61,61,61,61,61,61,-43,-49,-55,-61,-67,-73,-74,]),'PLUSPLUS':([60,77,78,79,80,81,82,98,99,100,101,102,103,],[75,75,75,75,75,75,75,75,75,75,75,75,75,]),'MINUSMINUS':([60,77,78,79,80,81,82,98,99,100,101,102,103,],[76,76,76,76,76,76,76,76,76,76,76,76,76,]),'TIMES_ASSIGN':([60,77,78,79,80,81,82,98,99,100,101,102,103,],[77,77,77,77,77,77,77,77,77,77,77,77,77,]),'MINUS_ASSIGN':([60,77,78,79,80,81,82,98,99,100,101,102,103,],[78,78,78,78,78,78,78,78,78,78,78,78,78,]),'PLUS_ASSIGN':([60,77,78,79,80,81,82,98,99,100,101,102,103,],[79,79,79,79,79,79,79,79,79,79,79,79,79,]),'DIVIDE_ASSIGN':([60,77,78,79,80,81,82,98,99,100,101,102,103,],[80,80,80,80,80,80,80,80,80,80,80,80,80,]),'MOD_ASSIGN':([60,77,78,79,80,81,82,98,99,100,101,102,103,],[81,81,81,81,81,81,81,81,81,81,81,81,81,]),'LPAREN':([60,77,78,79,80,81,82,98,99,100,101,102,103,209,210,211,212,213,214,215,],[82,82,82,82,82,82,82,82,82,82,82,82,82,216,217,218,219,220,221,222,]),'INTEGER':([60,77,78,79,80,81,82,98,99,100,101,102,103,],[83,83,83,83,83,83,83,83,83,83,83,83,83,]),'PLUS':([60,74,75,76,77,78,79,80,81,82,83,84,98,99,100,101,102,103,104,105,106,107,108,109,135,136,137,138,139,140,141,],[-93,98,-82,-83,-93,-93,-93,-93,-93,-93,-91,-92,-93,-93,-93,-93,-93,-93,98,98,98,98,98,98,-77,-78,-79,-80,98,98,-90,]),'MINUS':([60,74,75,76,77,78,79,80,81,82,83,84,98,99,100,101,102,103,104,105,106,107,108,109,135,136,137,138,139,140,141,],[-93,99,-82,-83,-93,-93,-93,-93,-93,-93,-91,-92,-93,-93,-93,-93,-93,-93,99,99,99,99,99,99,-77,-78,-79,-80,99,99,-90,]),'TIMES':([60,74,75,76,77,78,79,80,81,82,83,84,98,99,100,101,102,103,104,105,106,107,108,109,135,136,137,138,139,140,141,],[-93,100,-82,-83,-93,-93,-93,-93,-93,-93,-91,-92,-93,-93,-93,-93,-93,-93,100,100,100,100,100,100,100,100,-79,-80,100,100,-90,]),'DIVIDE':([60,74,75,76,77,78,79,80,81,82,83,84,98,99,100,101,102,103,104,105,106,107,108,109,135,136,137,138,139,140,141,],[-93,101,-82,-83,-93,-93,-93,-93,-93,-93,-91,-92,-93,-93,-93,-93,-93,-93,101,101,101,101,101,101,101,101,-79,-80,101,101,-90,]),'MOD':([60,74,75,76,77,78,79,80,81,82,83,84,98,99,100,101,102,103,104,105,106,107,108,109,135,136,137,138,139,140,141,],[-93,102,-82,-83,-93,-93,-93,-93,-93,-93,-91,-92,-93,-93,-93,-93,-93,-93,102,102,102,102,102,102,-77,-78,-79,-80,102,102,-90,]),'TIMESTIMES':([60,74,75,76,77,78,79,80,81,82,83,84,98,99,100,101,102,103,104,105,106,107,108,109,135,136,137,138,139,140,141,],[-93,103,-82,-83,-93,-93,-93,-93,-93,-93,-91,-92,-93,-93,-93,-93,-93,-93,103,103,103,103,103,103,-77,-78,-79,-80,103,103,-90,]),'RPAREN':([75,76,77,78,79,80,81,82,83,84,98,99,100,101,102,103,104,105,106,107,108,109,135,136,137,138,139,140,141,216,217,218,219,220,221,222,],[-82,-83,-93,-93,-93,-93,-93,-93,-91,-92,-93,-93,-93,-93,-93,-93,-85,-86,-87,-88,-89,141,-77,-78,-79,-80,-81,-84,-90,223,224,225,226,227,228,229,]),'STRING':([89,95,],[120,120,]),'NEW':([143,145,147,149,151,153,],[161,163,165,167,169,171,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration':([0,],[2,]),'listdeclaration':([0,],[3,]),'arraydeclaration':([0,],[4,]),'linkedlistdeclaration':([0,],[5,]),'doublelinkedlistdeclaration':([0,],[6,]),'stackdeclaration':([0,],[7,]),'queuedeclaration':([0,],[8,]),'accessmodif':([0,9,],[9,15,]),'empty':([0,9,15,60,77,78,79,80,81,82,98,99,100,101,102,103,185,186,187,188,189,190,191,],[14,19,21,84,84,84,84,84,84,84,84,84,84,84,84,84,202,202,202,202,202,202,202,]),'finalstatvar':([9,15,],[16,20,]),'Type':([16,47,48,49,50,51,52,53,54,55,56,57,58,],[22,62,63,64,65,66,67,68,69,70,71,72,73,]),'assign':([22,],[46,]),'endexpression':([45,74,110,112,114,116,118,121,123,125,127,129,131,133,160,162,164,166,168,170,],[59,97,142,144,146,148,150,152,154,155,156,157,158,159,172,174,176,178,180,182,]),'expression':([60,77,78,79,80,81,82,98,99,100,101,102,103,],[74,104,105,106,107,108,109,135,136,137,138,139,140,]),'listassign':([85,91,],[111,124,]),'arrayassign':([86,92,],[113,126,]),'linkedlistassign':([87,93,],[115,128,]),'doublelinkedlistassign':([88,94,],[117,130,]),'stackassign':([89,95,],[119,132,]),'queueassign':([90,96,],[122,134,]),'listexpression':([143,],[160,]),'arrayexpression':([145,],[162,]),'linkedlistexpression':([147,],[164,]),'doublelinkedlistexpression':([149,],[166,]),'stackexpression':([151,],[168,]),'queueexpression':([153,],[170,]),'Typet':([185,186,187,188,189,190,191,],[192,203,204,205,206,207,208,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration','program',1,'p_program','Yacc.py',20),
  ('program -> listdeclaration','program',1,'p_program','Yacc.py',21),
  ('program -> arraydeclaration','program',1,'p_program','Yacc.py',22),
  ('program -> linkedlistdeclaration','program',1,'p_program','Yacc.py',23),
  ('program -> doublelinkedlistdeclaration','program',1,'p_program','Yacc.py',24),
  ('program -> stackdeclaration','program',1,'p_program','Yacc.py',25),
  ('program -> queuedeclaration','program',1,'p_program','Yacc.py',26),
  ('Type -> INT','Type',1,'p_Type','Yacc.py',30),
  ('Type -> BOOLEAN','Type',1,'p_Type','Yacc.py',31),
  ('Type -> SHORT','Type',1,'p_Type','Yacc.py',32),
  ('Type -> FLOAT','Type',1,'p_Type','Yacc.py',33),
  ('Type -> LONG','Type',1,'p_Type','Yacc.py',34),
  ('Type -> DOUBLE','Type',1,'p_Type','Yacc.py',35),
  ('Type -> CHAR','Type',1,'p_Type','Yacc.py',36),
  ('Type -> BYTE','Type',1,'p_Type','Yacc.py',37),
  ('Type -> OBJECT','Type',1,'p_Type','Yacc.py',38),
  ('Typet -> INT','Typet',1,'p_Typet','Yacc.py',43),
  ('Typet -> BOOLEAN','Typet',1,'p_Typet','Yacc.py',44),
  ('Typet -> SHORT','Typet',1,'p_Typet','Yacc.py',45),
  ('Typet -> FLOAT','Typet',1,'p_Typet','Yacc.py',46),
  ('Typet -> LONG','Typet',1,'p_Typet','Yacc.py',47),
  ('Typet -> DOUBLE','Typet',1,'p_Typet','Yacc.py',48),
  ('Typet -> CHAR','Typet',1,'p_Typet','Yacc.py',49),
  ('Typet -> BYTE','Typet',1,'p_Typet','Yacc.py',50),
  ('Typet -> OBJECT','Typet',1,'p_Typet','Yacc.py',51),
  ('Typet -> empty','Typet',1,'p_Typet','Yacc.py',52),
  ('accessmodif -> PUBLIC','accessmodif',1,'p_accessmodif','Yacc.py',57),
  ('accessmodif -> PRIVATE','accessmodif',1,'p_accessmodif','Yacc.py',58),
  ('accessmodif -> PROTECTED','accessmodif',1,'p_accessmodif','Yacc.py',59),
  ('accessmodif -> DEFAULT','accessmodif',1,'p_accessmodif','Yacc.py',60),
  ('accessmodif -> empty','accessmodif',1,'p_accessmodif','Yacc.py',61),
  ('finalstatvar -> FINAL','finalstatvar',1,'p_finalstatvar','Yacc.py',65),
  ('finalstatvar -> STATIC','finalstatvar',1,'p_finalstatvar','Yacc.py',66),
  ('finalstatvar -> FINAL STATIC','finalstatvar',2,'p_finalstatvar','Yacc.py',67),
  ('finalstatvar -> empty','finalstatvar',1,'p_finalstatvar','Yacc.py',68),
  ('declaration -> accessmodif finalstatvar Type VAR endexpression','declaration',5,'p_declaration','Yacc.py',72),
  ('declaration -> accessmodif finalstatvar Type assign','declaration',4,'p_declaration','Yacc.py',73),
  ('listdeclaration -> accessmodif finalstatvar LIST LESSTHAN Type GREATTHAN VAR endexpression','listdeclaration',8,'p_listdeclaration','Yacc.py',78),
  ('listdeclaration -> accessmodif accessmodif finalstatvar LIST LESSTHAN Type GREATTHAN VAR endexpression','listdeclaration',9,'p_listdeclaration','Yacc.py',79),
  ('listdeclaration -> accessmodif finalstatvar LIST LESSTHAN Type GREATTHAN listassign','listdeclaration',7,'p_listdeclaration','Yacc.py',80),
  ('listdeclaration -> accessmodif accessmodif finalstatvar LIST LESSTHAN Type GREATTHAN listassign','listdeclaration',8,'p_listdeclaration','Yacc.py',81),
  ('listassign -> VAR EQUALS listexpression endexpression','listassign',4,'p_listassign','Yacc.py',86),
  ('listexpression -> NEW LIST LESSTHAN Typet GREATTHAN LPAREN RPAREN','listexpression',7,'p_listexpression','Yacc.py',90),
  ('arraydeclaration -> accessmodif finalstatvar ARRAYLIST LESSTHAN Type GREATTHAN VAR endexpression','arraydeclaration',8,'p_arraydeclaration','Yacc.py',95),
  ('arraydeclaration -> accessmodif accessmodif finalstatvar ARRAYLIST LESSTHAN Type GREATTHAN VAR endexpression','arraydeclaration',9,'p_arraydeclaration','Yacc.py',96),
  ('arraydeclaration -> accessmodif finalstatvar ARRAYLIST LESSTHAN Type GREATTHAN arrayassign','arraydeclaration',7,'p_arraydeclaration','Yacc.py',97),
  ('arraydeclaration -> accessmodif accessmodif finalstatvar ARRAYLIST LESSTHAN Type GREATTHAN arrayassign','arraydeclaration',8,'p_arraydeclaration','Yacc.py',98),
  ('arrayassign -> VAR EQUALS arrayexpression endexpression','arrayassign',4,'p_arrayassign','Yacc.py',103),
  ('arrayexpression -> NEW ARRAYLIST LESSTHAN Typet GREATTHAN LPAREN RPAREN','arrayexpression',7,'p_arrayexpression','Yacc.py',107),
  ('linkedlistdeclaration -> accessmodif finalstatvar LINKEDLIST LESSTHAN Type GREATTHAN VAR endexpression','linkedlistdeclaration',8,'p_linkedlistdeclaration','Yacc.py',112),
  ('linkedlistdeclaration -> accessmodif accessmodif finalstatvar LINKEDLIST LESSTHAN Type GREATTHAN VAR endexpression','linkedlistdeclaration',9,'p_linkedlistdeclaration','Yacc.py',113),
  ('linkedlistdeclaration -> accessmodif finalstatvar LINKEDLIST LESSTHAN Type GREATTHAN linkedlistassign','linkedlistdeclaration',7,'p_linkedlistdeclaration','Yacc.py',114),
  ('linkedlistdeclaration -> accessmodif accessmodif finalstatvar LINKEDLIST LESSTHAN Type GREATTHAN linkedlistassign','linkedlistdeclaration',8,'p_linkedlistdeclaration','Yacc.py',115),
  ('linkedlistassign -> VAR EQUALS linkedlistexpression endexpression','linkedlistassign',4,'p_linkedlistassign','Yacc.py',120),
  ('linkedlistexpression -> NEW LINKEDLIST LESSTHAN Typet GREATTHAN LPAREN RPAREN','linkedlistexpression',7,'p_linkedlistexpression','Yacc.py',124),
  ('doublelinkedlistdeclaration -> accessmodif finalstatvar DOUBLELINKEDLIST LESSTHAN Type GREATTHAN VAR endexpression','doublelinkedlistdeclaration',8,'p_doublelinkedlistdeclaration','Yacc.py',129),
  ('doublelinkedlistdeclaration -> accessmodif accessmodif finalstatvar DOUBLELINKEDLIST LESSTHAN Type GREATTHAN VAR endexpression','doublelinkedlistdeclaration',9,'p_doublelinkedlistdeclaration','Yacc.py',130),
  ('doublelinkedlistdeclaration -> accessmodif finalstatvar DOUBLELINKEDLIST LESSTHAN Type GREATTHAN doublelinkedlistassign','doublelinkedlistdeclaration',7,'p_doublelinkedlistdeclaration','Yacc.py',131),
  ('doublelinkedlistdeclaration -> accessmodif accessmodif finalstatvar DOUBLELINKEDLIST LESSTHAN Type GREATTHAN doublelinkedlistassign','doublelinkedlistdeclaration',8,'p_doublelinkedlistdeclaration','Yacc.py',132),
  ('doublelinkedlistassign -> VAR EQUALS doublelinkedlistexpression endexpression','doublelinkedlistassign',4,'p_doublelinkedlistassign','Yacc.py',137),
  ('doublelinkedlistexpression -> NEW DOUBLELINKEDLIST LESSTHAN Typet GREATTHAN LPAREN RPAREN','doublelinkedlistexpression',7,'p_doublelinkedlistexpression','Yacc.py',141),
  ('stackdeclaration -> accessmodif finalstatvar STACK LESSTHAN Type GREATTHAN VAR endexpression','stackdeclaration',8,'p_stackdeclaration','Yacc.py',146),
  ('stackdeclaration -> accessmodif accessmodif finalstatvar STACK LESSTHAN Type GREATTHAN VAR endexpression','stackdeclaration',9,'p_stackdeclaration','Yacc.py',147),
  ('stackdeclaration -> accessmodif finalstatvar STACK LESSTHAN Type GREATTHAN stackassign','stackdeclaration',7,'p_stackdeclaration','Yacc.py',148),
  ('stackdeclaration -> accessmodif accessmodif finalstatvar STACK LESSTHAN Type GREATTHAN stackassign','stackdeclaration',8,'p_stackdeclaration','Yacc.py',149),
  ('stackassign -> STRING EQUALS stackexpression endexpression','stackassign',4,'p_stackassign','Yacc.py',154),
  ('stackexpression -> NEW STACK LESSTHAN Typet GREATTHAN LPAREN RPAREN','stackexpression',7,'p_stackexpression','Yacc.py',158),
  ('queuedeclaration -> accessmodif finalstatvar QUEUE LESSTHAN Type GREATTHAN VAR endexpression','queuedeclaration',8,'p_queuedeclaration','Yacc.py',163),
  ('queuedeclaration -> accessmodif accessmodif finalstatvar QUEUE LESSTHAN Type GREATTHAN VAR endexpression','queuedeclaration',9,'p_queuedeclaration','Yacc.py',164),
  ('queuedeclaration -> accessmodif finalstatvar QUEUE LESSTHAN Type GREATTHAN queueassign','queuedeclaration',7,'p_queuedeclaration','Yacc.py',165),
  ('queuedeclaration -> accessmodif accessmodif finalstatvar QUEUE LESSTHAN Type GREATTHAN queueassign','queuedeclaration',8,'p_queuedeclaration','Yacc.py',166),
  ('queueassign -> VAR EQUALS queueexpression endexpression','queueassign',4,'p_queueassign','Yacc.py',171),
  ('queueexpression -> NEW QUEUE LESSTHAN Typet GREATTHAN LPAREN RPAREN','queueexpression',7,'p_queueexpression','Yacc.py',175),
  ('queueexpression -> NEW LINKEDLIST LESSTHAN Typet GREATTHAN LPAREN RPAREN','queueexpression',7,'p_queueexpression','Yacc.py',176),
  ('assign -> VAR EQUALS expression endexpression','assign',4,'p_assign','Yacc.py',181),
  ('endexpression -> PUNTOCOMA','endexpression',1,'p_endexpression','Yacc.py',185),
  ('expression -> expression PLUS expression','expression',3,'p_expression','Yacc.py',189),
  ('expression -> expression MINUS expression','expression',3,'p_expression','Yacc.py',190),
  ('expression -> expression TIMES expression','expression',3,'p_expression','Yacc.py',191),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','Yacc.py',192),
  ('expression -> expression MOD expression','expression',3,'p_expression','Yacc.py',193),
  ('expression -> PLUSPLUS','expression',1,'p_expression','Yacc.py',194),
  ('expression -> MINUSMINUS','expression',1,'p_expression','Yacc.py',195),
  ('expression -> expression TIMESTIMES expression','expression',3,'p_expression','Yacc.py',196),
  ('expression -> TIMES_ASSIGN expression','expression',2,'p_expression','Yacc.py',197),
  ('expression -> MINUS_ASSIGN expression','expression',2,'p_expression','Yacc.py',198),
  ('expression -> PLUS_ASSIGN expression','expression',2,'p_expression','Yacc.py',199),
  ('expression -> DIVIDE_ASSIGN expression','expression',2,'p_expression','Yacc.py',200),
  ('expression -> MOD_ASSIGN expression','expression',2,'p_expression','Yacc.py',201),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','Yacc.py',202),
  ('expression -> INTEGER','expression',1,'p_expression','Yacc.py',203),
  ('expression -> empty','expression',1,'p_expression','Yacc.py',204),
  ('empty -> <empty>','empty',0,'p_empty','Yacc.py',234),
]
